/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Employee: EmployeeObject
      Employer: EmployerObject
      EmployeeConnection: EmployeeConnectionObject
      PageInfo: PageInfoObject
      EmployeeEdge: EmployeeEdgeObject
      AggregateEmployee: AggregateEmployeeObject
      EmployerConnection: EmployerConnectionObject
      EmployerEdge: EmployerEdgeObject
      AggregateEmployer: AggregateEmployerObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      EmployeeSubscriptionPayload: EmployeeSubscriptionPayloadObject
      EmployeePreviousValues: EmployeePreviousValuesObject
      EmployerSubscriptionPayload: EmployerSubscriptionPayloadObject
      EmployerPreviousValues: EmployerPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Employee: EmployeeFieldDetails
      Employer: EmployerFieldDetails
      EmployeeConnection: EmployeeConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      EmployeeEdge: EmployeeEdgeFieldDetails
      AggregateEmployee: AggregateEmployeeFieldDetails
      EmployerConnection: EmployerConnectionFieldDetails
      EmployerEdge: EmployerEdgeFieldDetails
      AggregateEmployer: AggregateEmployerFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      EmployeeSubscriptionPayload: EmployeeSubscriptionPayloadFieldDetails
      EmployeePreviousValues: EmployeePreviousValuesFieldDetails
      EmployerSubscriptionPayload: EmployerSubscriptionPayloadFieldDetails
      EmployerPreviousValues: EmployerPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      EmployeeWhereUniqueInput: EmployeeWhereUniqueInputInputObject
      EmployeeWhereInput: EmployeeWhereInputInputObject
      EmployerWhereInput: EmployerWhereInputInputObject
      EmployerWhereUniqueInput: EmployerWhereUniqueInputInputObject
      EmployeeCreateInput: EmployeeCreateInputInputObject
      EmployerCreateOneWithoutEmployeesInput: EmployerCreateOneWithoutEmployeesInputInputObject
      EmployerCreateWithoutEmployeesInput: EmployerCreateWithoutEmployeesInputInputObject
      EmployeeUpdateInput: EmployeeUpdateInputInputObject
      EmployerUpdateOneWithoutEmployeesInput: EmployerUpdateOneWithoutEmployeesInputInputObject
      EmployerUpdateWithoutEmployeesDataInput: EmployerUpdateWithoutEmployeesDataInputInputObject
      EmployerUpsertWithoutEmployeesInput: EmployerUpsertWithoutEmployeesInputInputObject
      EmployeeUpdateManyMutationInput: EmployeeUpdateManyMutationInputInputObject
      EmployerCreateInput: EmployerCreateInputInputObject
      EmployeeCreateManyWithoutEmployerInput: EmployeeCreateManyWithoutEmployerInputInputObject
      EmployeeCreateWithoutEmployerInput: EmployeeCreateWithoutEmployerInputInputObject
      EmployerUpdateInput: EmployerUpdateInputInputObject
      EmployeeUpdateManyWithoutEmployerInput: EmployeeUpdateManyWithoutEmployerInputInputObject
      EmployeeUpdateWithWhereUniqueWithoutEmployerInput: EmployeeUpdateWithWhereUniqueWithoutEmployerInputInputObject
      EmployeeUpdateWithoutEmployerDataInput: EmployeeUpdateWithoutEmployerDataInputInputObject
      EmployeeUpsertWithWhereUniqueWithoutEmployerInput: EmployeeUpsertWithWhereUniqueWithoutEmployerInputInputObject
      EmployeeScalarWhereInput: EmployeeScalarWhereInputInputObject
      EmployeeUpdateManyWithWhereNestedInput: EmployeeUpdateManyWithWhereNestedInputInputObject
      EmployeeUpdateManyDataInput: EmployeeUpdateManyDataInputInputObject
      EmployerUpdateManyMutationInput: EmployerUpdateManyMutationInputInputObject
      EmployeeSubscriptionWhereInput: EmployeeSubscriptionWhereInputInputObject
      EmployerSubscriptionWhereInput: EmployerSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    EmployeeOrderByInput: EmployeeOrderByInputValues,
    EmployerOrderByInput: EmployerOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'employee', args?: QueryEmployeeArgs[] | false, alias?: string  } 
  | { name: 'employees', args?: QueryEmployeesArgs[] | false, alias?: string  } 
  | { name: 'employeesConnection', args?: QueryEmployeesConnectionArgs[] | false, alias?: string  } 
  | { name: 'employer', args?: QueryEmployerArgs[] | false, alias?: string  } 
  | { name: 'employers', args?: QueryEmployersArgs[] | false, alias?: string  } 
  | { name: 'employersConnection', args?: QueryEmployersConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'employee'
  | 'employees'
  | 'employeesConnection'
  | 'employer'
  | 'employers'
  | 'employersConnection'


type QueryEmployeeArgs =
  | 'where'
type QueryEmployeesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEmployeesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEmployerArgs =
  | 'where'
type QueryEmployersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEmployersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  employee: {
    type: 'Employee'
    args: Record<QueryEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EmployeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  employees: {
    type: 'Employee'
    args: Record<QueryEmployeesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmployeeWhereInput | null, orderBy?: prisma.EmployeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee[]> | prisma.Employee[]
  }
  employeesConnection: {
    type: 'EmployeeConnection'
    args: Record<QueryEmployeesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmployeeWhereInput | null, orderBy?: prisma.EmployeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeeConnection> | prisma.EmployeeConnection
  }
  employer: {
    type: 'Employer'
    args: Record<QueryEmployerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EmployerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employer | null> | prisma.Employer | null
  }
  employers: {
    type: 'Employer'
    args: Record<QueryEmployersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmployerWhereInput | null, orderBy?: prisma.EmployerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employer[]> | prisma.Employer[]
  }
  employersConnection: {
    type: 'EmployerConnection'
    args: Record<QueryEmployersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmployerWhereInput | null, orderBy?: prisma.EmployerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployerConnection> | prisma.EmployerConnection
  }
}
  

// Types for Employee

type EmployeeObject =
  | EmployeeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'photo_url', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'employer', args?: [] | false, alias?: string  } 

type EmployeeFields =
  | 'id'
  | 'name'
  | 'email'
  | 'photo_url'
  | 'createdAt'
  | 'updatedAt'
  | 'status'
  | 'employer'



  

export interface EmployeeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  photo_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  employer: {
    type: 'Employer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Employee">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employer | null> | prisma.Employer | null
  }
}
  

// Types for Employer

type EmployerObject =
  | EmployerFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'photo_url', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'employees', args?: EmployerEmployeesArgs[] | false, alias?: string  } 

type EmployerFields =
  | 'id'
  | 'name'
  | 'email'
  | 'photo_url'
  | 'createdAt'
  | 'updatedAt'
  | 'employees'


type EmployerEmployeesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface EmployerFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  photo_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  employees: {
    type: 'Employee'
    args: Record<EmployerEmployeesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Employer">,
      args: { where?: EmployeeWhereInput | null, orderBy?: prisma.EmployeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee[]> | prisma.Employee[]
  }
}
  

// Types for EmployeeConnection

type EmployeeConnectionObject =
  | EmployeeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EmployeeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EmployeeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EmployeeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeeEdge[]> | prisma.EmployeeEdge[]
  }
  aggregate: {
    type: 'AggregateEmployee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEmployee> | prisma.AggregateEmployee
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EmployeeEdge

type EmployeeEdgeObject =
  | EmployeeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EmployeeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EmployeeEdgeFieldDetails {
  node: {
    type: 'Employee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEmployee

type AggregateEmployeeObject =
  | AggregateEmployeeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEmployeeFields =
  | 'count'



  

export interface AggregateEmployeeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EmployerConnection

type EmployerConnectionObject =
  | EmployerConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EmployerConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EmployerConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EmployerEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EmployerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployerEdge[]> | prisma.EmployerEdge[]
  }
  aggregate: {
    type: 'AggregateEmployer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEmployer> | prisma.AggregateEmployer
  }
}
  

// Types for EmployerEdge

type EmployerEdgeObject =
  | EmployerEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EmployerEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EmployerEdgeFieldDetails {
  node: {
    type: 'Employer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployerEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employer> | prisma.Employer
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEmployer

type AggregateEmployerObject =
  | AggregateEmployerFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEmployerFields =
  | 'count'



  

export interface AggregateEmployerFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createEmployee', args?: MutationCreateEmployeeArgs[] | false, alias?: string  } 
  | { name: 'updateEmployee', args?: MutationUpdateEmployeeArgs[] | false, alias?: string  } 
  | { name: 'updateManyEmployees', args?: MutationUpdateManyEmployeesArgs[] | false, alias?: string  } 
  | { name: 'upsertEmployee', args?: MutationUpsertEmployeeArgs[] | false, alias?: string  } 
  | { name: 'deleteEmployee', args?: MutationDeleteEmployeeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEmployees', args?: MutationDeleteManyEmployeesArgs[] | false, alias?: string  } 
  | { name: 'createEmployer', args?: MutationCreateEmployerArgs[] | false, alias?: string  } 
  | { name: 'updateEmployer', args?: MutationUpdateEmployerArgs[] | false, alias?: string  } 
  | { name: 'updateManyEmployers', args?: MutationUpdateManyEmployersArgs[] | false, alias?: string  } 
  | { name: 'upsertEmployer', args?: MutationUpsertEmployerArgs[] | false, alias?: string  } 
  | { name: 'deleteEmployer', args?: MutationDeleteEmployerArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEmployers', args?: MutationDeleteManyEmployersArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createEmployee'
  | 'updateEmployee'
  | 'updateManyEmployees'
  | 'upsertEmployee'
  | 'deleteEmployee'
  | 'deleteManyEmployees'
  | 'createEmployer'
  | 'updateEmployer'
  | 'updateManyEmployers'
  | 'upsertEmployer'
  | 'deleteEmployer'
  | 'deleteManyEmployers'


type MutationCreateEmployeeArgs =
  | 'data'
type MutationUpdateEmployeeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEmployeesArgs =
  | 'data'
  | 'where'
type MutationUpsertEmployeeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEmployeeArgs =
  | 'where'
type MutationDeleteManyEmployeesArgs =
  | 'where'
type MutationCreateEmployerArgs =
  | 'data'
type MutationUpdateEmployerArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEmployersArgs =
  | 'data'
  | 'where'
type MutationUpsertEmployerArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEmployerArgs =
  | 'where'
type MutationDeleteManyEmployersArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createEmployee: {
    type: 'Employee'
    args: Record<MutationCreateEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  updateEmployee: {
    type: 'Employee'
    args: Record<MutationUpdateEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeeUpdateInput, where: EmployeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  updateManyEmployees: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEmployeesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeeUpdateManyMutationInput, where?: EmployeeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEmployee: {
    type: 'Employee'
    args: Record<MutationUpsertEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmployeeWhereUniqueInput, create: EmployeeCreateInput, update: EmployeeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  deleteEmployee: {
    type: 'Employee'
    args: Record<MutationDeleteEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmployeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  deleteManyEmployees: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEmployeesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EmployeeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEmployer: {
    type: 'Employer'
    args: Record<MutationCreateEmployerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployerCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employer> | prisma.Employer
  }
  updateEmployer: {
    type: 'Employer'
    args: Record<MutationUpdateEmployerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployerUpdateInput, where: EmployerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employer | null> | prisma.Employer | null
  }
  updateManyEmployers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEmployersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployerUpdateManyMutationInput, where?: EmployerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEmployer: {
    type: 'Employer'
    args: Record<MutationUpsertEmployerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmployerWhereUniqueInput, create: EmployerCreateInput, update: EmployerUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employer> | prisma.Employer
  }
  deleteEmployer: {
    type: 'Employer'
    args: Record<MutationDeleteEmployerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmployerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employer | null> | prisma.Employer | null
  }
  deleteManyEmployers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEmployersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EmployerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'employee', args?: SubscriptionEmployeeArgs[] | false, alias?: string  } 
  | { name: 'employer', args?: SubscriptionEmployerArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'employee'
  | 'employer'


type SubscriptionEmployeeArgs =
  | 'where'
type SubscriptionEmployerArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  employee: {
    type: 'EmployeeSubscriptionPayload'
    args: Record<SubscriptionEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EmployeeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeeSubscriptionPayload | null> | prisma.EmployeeSubscriptionPayload | null
  }
  employer: {
    type: 'EmployerSubscriptionPayload'
    args: Record<SubscriptionEmployerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EmployerSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployerSubscriptionPayload | null> | prisma.EmployerSubscriptionPayload | null
  }
}
  

// Types for EmployeeSubscriptionPayload

type EmployeeSubscriptionPayloadObject =
  | EmployeeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EmployeeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EmployeeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Employee'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmployeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EmployeePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmployeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeePreviousValues | null> | prisma.EmployeePreviousValues | null
  }
}
  

// Types for EmployeePreviousValues

type EmployeePreviousValuesObject =
  | EmployeePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'photo_url', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 

type EmployeePreviousValuesFields =
  | 'id'
  | 'name'
  | 'email'
  | 'photo_url'
  | 'createdAt'
  | 'updatedAt'
  | 'status'



  

export interface EmployeePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  photo_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EmployerSubscriptionPayload

type EmployerSubscriptionPayloadObject =
  | EmployerSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EmployerSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EmployerSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Employer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmployerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employer | null> | prisma.Employer | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EmployerPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmployerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployerPreviousValues | null> | prisma.EmployerPreviousValues | null
  }
}
  

// Types for EmployerPreviousValues

type EmployerPreviousValuesObject =
  | EmployerPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'photo_url', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type EmployerPreviousValuesFields =
  | 'id'
  | 'name'
  | 'email'
  | 'photo_url'
  | 'createdAt'
  | 'updatedAt'



  

export interface EmployerPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  photo_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface EmployeeWhereUniqueInput {
  id?: string | null
}
export type EmployeeWhereUniqueInputInputObject =
  | Extract<keyof EmployeeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EmployeeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  photo_url?: string | null
  photo_url_not?: string | null
  photo_url_in?: string[]
  photo_url_not_in?: string[]
  photo_url_lt?: string | null
  photo_url_lte?: string | null
  photo_url_gt?: string | null
  photo_url_gte?: string | null
  photo_url_contains?: string | null
  photo_url_not_contains?: string | null
  photo_url_starts_with?: string | null
  photo_url_not_starts_with?: string | null
  photo_url_ends_with?: string | null
  photo_url_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  status?: boolean | null
  status_not?: boolean | null
  employer?: EmployerWhereInput | null
  AND?: EmployeeWhereInput[]
  OR?: EmployeeWhereInput[]
  NOT?: EmployeeWhereInput[]
}
export type EmployeeWhereInputInputObject =
  | Extract<keyof EmployeeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'photo_url_not', alias?: string  } 
  | { name: 'photo_url_in', alias?: string  } 
  | { name: 'photo_url_not_in', alias?: string  } 
  | { name: 'photo_url_lt', alias?: string  } 
  | { name: 'photo_url_lte', alias?: string  } 
  | { name: 'photo_url_gt', alias?: string  } 
  | { name: 'photo_url_gte', alias?: string  } 
  | { name: 'photo_url_contains', alias?: string  } 
  | { name: 'photo_url_not_contains', alias?: string  } 
  | { name: 'photo_url_starts_with', alias?: string  } 
  | { name: 'photo_url_not_starts_with', alias?: string  } 
  | { name: 'photo_url_ends_with', alias?: string  } 
  | { name: 'photo_url_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'employer', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmployerWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  photo_url?: string | null
  photo_url_not?: string | null
  photo_url_in?: string[]
  photo_url_not_in?: string[]
  photo_url_lt?: string | null
  photo_url_lte?: string | null
  photo_url_gt?: string | null
  photo_url_gte?: string | null
  photo_url_contains?: string | null
  photo_url_not_contains?: string | null
  photo_url_starts_with?: string | null
  photo_url_not_starts_with?: string | null
  photo_url_ends_with?: string | null
  photo_url_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  employees_every?: EmployeeWhereInput | null
  employees_some?: EmployeeWhereInput | null
  employees_none?: EmployeeWhereInput | null
  AND?: EmployerWhereInput[]
  OR?: EmployerWhereInput[]
  NOT?: EmployerWhereInput[]
}
export type EmployerWhereInputInputObject =
  | Extract<keyof EmployerWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'photo_url_not', alias?: string  } 
  | { name: 'photo_url_in', alias?: string  } 
  | { name: 'photo_url_not_in', alias?: string  } 
  | { name: 'photo_url_lt', alias?: string  } 
  | { name: 'photo_url_lte', alias?: string  } 
  | { name: 'photo_url_gt', alias?: string  } 
  | { name: 'photo_url_gte', alias?: string  } 
  | { name: 'photo_url_contains', alias?: string  } 
  | { name: 'photo_url_not_contains', alias?: string  } 
  | { name: 'photo_url_starts_with', alias?: string  } 
  | { name: 'photo_url_not_starts_with', alias?: string  } 
  | { name: 'photo_url_ends_with', alias?: string  } 
  | { name: 'photo_url_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'employees_every', alias?: string  } 
  | { name: 'employees_some', alias?: string  } 
  | { name: 'employees_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmployerWhereUniqueInput {
  id?: string | null
}
export type EmployerWhereUniqueInputInputObject =
  | Extract<keyof EmployerWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EmployeeCreateInput {
  id?: string | null
  name?: string
  email?: string
  photo_url?: string | null
  status?: boolean | null
  employer?: EmployerCreateOneWithoutEmployeesInput | null
}
export type EmployeeCreateInputInputObject =
  | Extract<keyof EmployeeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'employer', alias?: string  } 
  
export interface EmployerCreateOneWithoutEmployeesInput {
  create?: EmployerCreateWithoutEmployeesInput | null
  connect?: EmployerWhereUniqueInput | null
}
export type EmployerCreateOneWithoutEmployeesInputInputObject =
  | Extract<keyof EmployerCreateOneWithoutEmployeesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EmployerCreateWithoutEmployeesInput {
  id?: string | null
  name?: string
  email?: string
  photo_url?: string | null
}
export type EmployerCreateWithoutEmployeesInputInputObject =
  | Extract<keyof EmployerCreateWithoutEmployeesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  
export interface EmployeeUpdateInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
  status?: boolean | null
  employer?: EmployerUpdateOneWithoutEmployeesInput | null
}
export type EmployeeUpdateInputInputObject =
  | Extract<keyof EmployeeUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'employer', alias?: string  } 
  
export interface EmployerUpdateOneWithoutEmployeesInput {
  create?: EmployerCreateWithoutEmployeesInput | null
  update?: EmployerUpdateWithoutEmployeesDataInput | null
  upsert?: EmployerUpsertWithoutEmployeesInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: EmployerWhereUniqueInput | null
}
export type EmployerUpdateOneWithoutEmployeesInputInputObject =
  | Extract<keyof EmployerUpdateOneWithoutEmployeesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EmployerUpdateWithoutEmployeesDataInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
}
export type EmployerUpdateWithoutEmployeesDataInputInputObject =
  | Extract<keyof EmployerUpdateWithoutEmployeesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  
export interface EmployerUpsertWithoutEmployeesInput {
  update?: EmployerUpdateWithoutEmployeesDataInput
  create?: EmployerCreateWithoutEmployeesInput
}
export type EmployerUpsertWithoutEmployeesInputInputObject =
  | Extract<keyof EmployerUpsertWithoutEmployeesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EmployeeUpdateManyMutationInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
  status?: boolean | null
}
export type EmployeeUpdateManyMutationInputInputObject =
  | Extract<keyof EmployeeUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface EmployerCreateInput {
  id?: string | null
  name?: string
  email?: string
  photo_url?: string | null
  employees?: EmployeeCreateManyWithoutEmployerInput | null
}
export type EmployerCreateInputInputObject =
  | Extract<keyof EmployerCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'employees', alias?: string  } 
  
export interface EmployeeCreateManyWithoutEmployerInput {
  create?: EmployeeCreateWithoutEmployerInput[]
  connect?: EmployeeWhereUniqueInput[]
}
export type EmployeeCreateManyWithoutEmployerInputInputObject =
  | Extract<keyof EmployeeCreateManyWithoutEmployerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EmployeeCreateWithoutEmployerInput {
  id?: string | null
  name?: string
  email?: string
  photo_url?: string | null
  status?: boolean | null
}
export type EmployeeCreateWithoutEmployerInputInputObject =
  | Extract<keyof EmployeeCreateWithoutEmployerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface EmployerUpdateInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
  employees?: EmployeeUpdateManyWithoutEmployerInput | null
}
export type EmployerUpdateInputInputObject =
  | Extract<keyof EmployerUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'employees', alias?: string  } 
  
export interface EmployeeUpdateManyWithoutEmployerInput {
  create?: EmployeeCreateWithoutEmployerInput[]
  delete?: EmployeeWhereUniqueInput[]
  connect?: EmployeeWhereUniqueInput[]
  set?: EmployeeWhereUniqueInput[]
  disconnect?: EmployeeWhereUniqueInput[]
  update?: EmployeeUpdateWithWhereUniqueWithoutEmployerInput[]
  upsert?: EmployeeUpsertWithWhereUniqueWithoutEmployerInput[]
  deleteMany?: EmployeeScalarWhereInput[]
  updateMany?: EmployeeUpdateManyWithWhereNestedInput[]
}
export type EmployeeUpdateManyWithoutEmployerInputInputObject =
  | Extract<keyof EmployeeUpdateManyWithoutEmployerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EmployeeUpdateWithWhereUniqueWithoutEmployerInput {
  where?: EmployeeWhereUniqueInput
  data?: EmployeeUpdateWithoutEmployerDataInput
}
export type EmployeeUpdateWithWhereUniqueWithoutEmployerInputInputObject =
  | Extract<keyof EmployeeUpdateWithWhereUniqueWithoutEmployerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EmployeeUpdateWithoutEmployerDataInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
  status?: boolean | null
}
export type EmployeeUpdateWithoutEmployerDataInputInputObject =
  | Extract<keyof EmployeeUpdateWithoutEmployerDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface EmployeeUpsertWithWhereUniqueWithoutEmployerInput {
  where?: EmployeeWhereUniqueInput
  update?: EmployeeUpdateWithoutEmployerDataInput
  create?: EmployeeCreateWithoutEmployerInput
}
export type EmployeeUpsertWithWhereUniqueWithoutEmployerInputInputObject =
  | Extract<keyof EmployeeUpsertWithWhereUniqueWithoutEmployerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EmployeeScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  photo_url?: string | null
  photo_url_not?: string | null
  photo_url_in?: string[]
  photo_url_not_in?: string[]
  photo_url_lt?: string | null
  photo_url_lte?: string | null
  photo_url_gt?: string | null
  photo_url_gte?: string | null
  photo_url_contains?: string | null
  photo_url_not_contains?: string | null
  photo_url_starts_with?: string | null
  photo_url_not_starts_with?: string | null
  photo_url_ends_with?: string | null
  photo_url_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  status?: boolean | null
  status_not?: boolean | null
  AND?: EmployeeScalarWhereInput[]
  OR?: EmployeeScalarWhereInput[]
  NOT?: EmployeeScalarWhereInput[]
}
export type EmployeeScalarWhereInputInputObject =
  | Extract<keyof EmployeeScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'photo_url_not', alias?: string  } 
  | { name: 'photo_url_in', alias?: string  } 
  | { name: 'photo_url_not_in', alias?: string  } 
  | { name: 'photo_url_lt', alias?: string  } 
  | { name: 'photo_url_lte', alias?: string  } 
  | { name: 'photo_url_gt', alias?: string  } 
  | { name: 'photo_url_gte', alias?: string  } 
  | { name: 'photo_url_contains', alias?: string  } 
  | { name: 'photo_url_not_contains', alias?: string  } 
  | { name: 'photo_url_starts_with', alias?: string  } 
  | { name: 'photo_url_not_starts_with', alias?: string  } 
  | { name: 'photo_url_ends_with', alias?: string  } 
  | { name: 'photo_url_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmployeeUpdateManyWithWhereNestedInput {
  where?: EmployeeScalarWhereInput
  data?: EmployeeUpdateManyDataInput
}
export type EmployeeUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof EmployeeUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EmployeeUpdateManyDataInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
  status?: boolean | null
}
export type EmployeeUpdateManyDataInputInputObject =
  | Extract<keyof EmployeeUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface EmployerUpdateManyMutationInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
}
export type EmployerUpdateManyMutationInputInputObject =
  | Extract<keyof EmployerUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  
export interface EmployeeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EmployeeWhereInput | null
  AND?: EmployeeSubscriptionWhereInput[]
  OR?: EmployeeSubscriptionWhereInput[]
  NOT?: EmployeeSubscriptionWhereInput[]
}
export type EmployeeSubscriptionWhereInputInputObject =
  | Extract<keyof EmployeeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmployerSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EmployerWhereInput | null
  AND?: EmployerSubscriptionWhereInput[]
  OR?: EmployerSubscriptionWhereInput[]
  NOT?: EmployerSubscriptionWhereInput[]
}
export type EmployerSubscriptionWhereInputInputObject =
  | Extract<keyof EmployerSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type EmployeeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'photo_url_ASC'
  | 'photo_url_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'status_ASC'
  | 'status_DESC'
  
export type EmployerOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'photo_url_ASC'
  | 'photo_url_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  