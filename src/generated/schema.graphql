### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateEmployee {
  count: Int!
}

type AggregateEmployer {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

"""Employee of a company(Employer)"""
type Employee {
  createdAt: DateTime!
  email: String!
  employer: Employer
  id: ID!
  name: String!
  photo_url: String
  updatedAt: DateTime!
}

type EmployeeConnection {
  aggregate: AggregateEmployee!
  edges: [EmployeeEdge!]!
  pageInfo: PageInfo!
}

input EmployeeCreateInput {
  email: String!
  employer: EmployerCreateOneWithoutEmployeesInput
  id: ID
  name: String!
  photo_url: String
  status: Boolean
}

input EmployeeCreateManyWithoutEmployerInput {
  connect: [EmployeeWhereUniqueInput!]
  create: [EmployeeCreateWithoutEmployerInput!]
}

input EmployeeCreateWithoutEmployerInput {
  email: String!
  id: ID
  name: String!
  photo_url: String
  status: Boolean
}

type EmployeeEdge {
  cursor: String!
  node: Employee!
}

enum EmployeeOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  photo_url_ASC
  photo_url_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input EmployeeScalarWhereInput {
  AND: [EmployeeScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [EmployeeScalarWhereInput!]
  OR: [EmployeeScalarWhereInput!]
  photo_url: String
  photo_url_contains: String
  photo_url_ends_with: String
  photo_url_gt: String
  photo_url_gte: String
  photo_url_in: [String!]
  photo_url_lt: String
  photo_url_lte: String
  photo_url_not: String
  photo_url_not_contains: String
  photo_url_not_ends_with: String
  photo_url_not_in: [String!]
  photo_url_not_starts_with: String
  photo_url_starts_with: String
  status: Boolean
  status_not: Boolean
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input EmployeeUpdateInput {
  email: String
  employer: EmployerUpdateOneWithoutEmployeesInput
  name: String
  photo_url: String
  status: Boolean
}

input EmployeeUpdateManyDataInput {
  email: String
  name: String
  photo_url: String
  status: Boolean
}

input EmployeeUpdateManyMutationInput {
  email: String
  name: String
  photo_url: String
  status: Boolean
}

input EmployeeUpdateManyWithoutEmployerInput {
  connect: [EmployeeWhereUniqueInput!]
  create: [EmployeeCreateWithoutEmployerInput!]
  delete: [EmployeeWhereUniqueInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutEmployerInput!]
  updateMany: [EmployeeUpdateManyWithWhereNestedInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutEmployerInput!]
}

input EmployeeUpdateManyWithWhereNestedInput {
  data: EmployeeUpdateManyDataInput!
  where: EmployeeScalarWhereInput!
}

input EmployeeUpdateWithoutEmployerDataInput {
  email: String
  name: String
  photo_url: String
  status: Boolean
}

input EmployeeUpdateWithWhereUniqueWithoutEmployerInput {
  data: EmployeeUpdateWithoutEmployerDataInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpsertWithWhereUniqueWithoutEmployerInput {
  create: EmployeeCreateWithoutEmployerInput!
  update: EmployeeUpdateWithoutEmployerDataInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeWhereInput {
  AND: [EmployeeWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  employer: EmployerWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  photo_url: String
  photo_url_contains: String
  photo_url_ends_with: String
  photo_url_gt: String
  photo_url_gte: String
  photo_url_in: [String!]
  photo_url_lt: String
  photo_url_lte: String
  photo_url_not: String
  photo_url_not_contains: String
  photo_url_not_ends_with: String
  photo_url_not_in: [String!]
  photo_url_not_starts_with: String
  photo_url_starts_with: String
  status: Boolean
  status_not: Boolean
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input EmployeeWhereUniqueInput {
  id: ID
}

"""Also known as a company that has employees"""
type Employer {
  createdAt: DateTime!
  email: String!
  employees(after: String, before: String, first: Int, last: Int, orderBy: EmployeeOrderByInput, skip: Int, where: EmployeeWhereInput): [Employee!]
  id: ID!
  name: String!

  """Number of employees under a employer"""
  num_employees: Int
  photo_url: String
  updatedAt: DateTime!
}

type EmployerConnection {
  aggregate: AggregateEmployer!
  edges: [EmployerEdge!]!
  pageInfo: PageInfo!
}

input EmployerCreateInput {
  email: String!
  employees: EmployeeCreateManyWithoutEmployerInput
  id: ID
  name: String!
  photo_url: String
}

input EmployerCreateOneWithoutEmployeesInput {
  connect: EmployerWhereUniqueInput
  create: EmployerCreateWithoutEmployeesInput
}

input EmployerCreateWithoutEmployeesInput {
  email: String!
  id: ID
  name: String!
  photo_url: String
}

type EmployerEdge {
  cursor: String!
  node: Employer!
}

enum EmployerOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  photo_url_ASC
  photo_url_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input EmployerUpdateInput {
  email: String
  employees: EmployeeUpdateManyWithoutEmployerInput
  name: String
  photo_url: String
}

input EmployerUpdateManyMutationInput {
  email: String
  name: String
  photo_url: String
}

input EmployerUpdateOneWithoutEmployeesInput {
  connect: EmployerWhereUniqueInput
  create: EmployerCreateWithoutEmployeesInput
  delete: Boolean
  disconnect: Boolean
  update: EmployerUpdateWithoutEmployeesDataInput
  upsert: EmployerUpsertWithoutEmployeesInput
}

input EmployerUpdateWithoutEmployeesDataInput {
  email: String
  name: String
  photo_url: String
}

input EmployerUpsertWithoutEmployeesInput {
  create: EmployerCreateWithoutEmployeesInput!
  update: EmployerUpdateWithoutEmployeesDataInput!
}

input EmployerWhereInput {
  AND: [EmployerWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  employees_every: EmployeeWhereInput
  employees_none: EmployeeWhereInput
  employees_some: EmployeeWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [EmployerWhereInput!]
  OR: [EmployerWhereInput!]
  photo_url: String
  photo_url_contains: String
  photo_url_ends_with: String
  photo_url_gt: String
  photo_url_gte: String
  photo_url_in: [String!]
  photo_url_lt: String
  photo_url_lte: String
  photo_url_not: String
  photo_url_not_contains: String
  photo_url_not_ends_with: String
  photo_url_not_in: [String!]
  photo_url_not_starts_with: String
  photo_url_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input EmployerWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createEmployee(data: EmployeeCreateInput!): Employee!
  createEmployer(data: EmployerCreateInput!): Employer!
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteEmployer(where: EmployerWhereUniqueInput!): Employer
  deleteManyEmployees(where: EmployeeWhereInput): BatchPayload!
  deleteManyEmployers(where: EmployerWhereInput): BatchPayload!
  updateEmployee(data: EmployeeUpdateInput!, where: EmployeeWhereUniqueInput!): Employee
  updateEmployer(data: EmployerUpdateInput!, where: EmployerWhereUniqueInput!): Employer
  updateManyEmployees(data: EmployeeUpdateManyMutationInput!, where: EmployeeWhereInput): BatchPayload!
  updateManyEmployers(data: EmployerUpdateManyMutationInput!, where: EmployerWhereInput): BatchPayload!
  upsertEmployee(create: EmployeeCreateInput!, update: EmployeeUpdateInput!, where: EmployeeWhereUniqueInput!): Employee!
  upsertEmployer(create: EmployerCreateInput!, update: EmployerUpdateInput!, where: EmployerWhereUniqueInput!): Employer!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  employee(where: EmployeeWhereUniqueInput!): Employee
  employees(after: String, before: String, first: Int, last: Int, orderBy: EmployeeOrderByInput, skip: Int, where: EmployeeWhereInput): [Employee!]!
  employeesConnection(after: String, before: String, first: Int, last: Int, orderBy: EmployeeOrderByInput, skip: Int, where: EmployeeWhereInput): EmployeeConnection!
  employer(where: EmployerWhereUniqueInput!): Employer
  employers(after: String, before: String, first: Int, last: Int, orderBy: EmployerOrderByInput, skip: Int, where: EmployerWhereInput): [Employer!]!
  employersConnection(after: String, before: String, first: Int, last: Int, orderBy: EmployerOrderByInput, skip: Int, where: EmployerWhereInput): EmployerConnection!
}

type Subscription {
  """Shows the list of employees in real time for a particular employer"""
  newEmployee(
    """Id of the employer"""
    employer_id: String!
  ): Employee
}
